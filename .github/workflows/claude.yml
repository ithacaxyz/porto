name: Claude PR Assistant

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned, labeled]
  pull_request_review:
    types: [submitted]

jobs:
  check-permissions:
    name: Check permissions
    runs-on: ubuntu-latest
    outputs:
      has-permission: ${{ steps.check.outputs.has-permission }}
    steps:
      - name: Check if user has write permissions
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            if (context.actor.endsWith('[bot]')) {
              console.log(`Skipping permission check for ${context.actor}`);
              core.setOutput('has-permission', true);
              return true;
            }
            
            try {
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: context.actor
              });
              
              const hasWritePermission = ['admin', 'maintain', 'write'].includes(permission.permission);
              console.log(`User ${context.actor} has permission: ${permission.permission}`);
              core.setOutput('has-permission', hasWritePermission);
              return hasWritePermission;
            } catch (error) {
              console.log(`Error checking permissions for ${context.actor}: ${error.message}`);
              core.setOutput('has-permission', false);
              return false;
            }

  claude-code-action:
    name: Claude PR Assistant
    needs: check-permissions
    if: |
      needs.check-permissions.outputs.has-permission == 'true' && (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
        (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.labels.*.name, 'claude-action')))
      )
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install dependencies
        uses: ./.github/actions/install-dependencies

      - name: Run Claude PR Action
        uses: anthropics/claude-code-action@beta
        env: 
          NODE_VERSION: 23.9.0
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          timeout_minutes: "60"
          disallowed_tools: "npm,yarn"
          allowed_tools: "mcp__github__create_pull_request,Bash(pnpm check),Bash(pnpm check:*),Bash(pnpm test),Bash(pnpm test:*),Bash(pnpm install),Bash(pnpm build)"
          custom_instructions: |
            You MUST follow the development workflow described in .ai/CLAUDE.md.
            You MUST open a draft pull request after creating a branch.
            You MUST create a pull request after completing your task.
            You can create pull requests using the `mcp__github__create_pull_request` tool.

  claude-pr-review:
    name: Claude PR Review
    needs: check-permissions
    if: |
      needs.check-permissions.outputs.has-permission == 'true' && (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
        (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.labels.*.name, 'claude-action')))
      )
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Install dependencies
        uses: ./.github/actions/install-dependencies

      - name: Run Claude PR Action
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          timeout_minutes: "60"
          disallowed_tools: "npm,yarn"
          allowed_tools: "mcp__github__create_pull_request,mcp__github__create_pending_pull_request_review,mcp__github__get_pull_request_diff,mcp__github__add_pull_request_review_comment_to_pending_review,mcp__github__submit_pending_pull_request_review,Bash(pnpm check),Bash(pnpm check:*),Bash(pnpm test),Bash(pnpm test:*),Bash(pnpm install),Bash(pnpm build)"
          direct_prompt: |-
            Please review this PR and provide inline feedback using the GitHub review system. Follow these steps:

            1. **Start a review**: Use `mcp__github__create_pending_pull_request_review` to begin a pending review
            2. **Get diff information**: Use `mcp__github__get_pull_request_diff` to understand the code changes and line numbers
            3. **Add inline comments**: Use `mcp__github__add_pull_request_review_comment_to_pending_review` for each specific piece of feedback on particular lines
            4. **Submit the review**: Use `mcp__github__submit_pending_pull_request_review` with event type "COMMENT" (not "REQUEST_CHANGES") to publish all comments as a non-blocking review

            Focus your review on:
            - Code quality and best practices
            - Potential bugs or security issues
            - Performance considerations
            - Maintainability and readability
            - Architecture and design decisions

            Provide specific, actionable feedback. Use inline comments for line-specific issues and include an overall summary when submitting the review.
            **Important**:
            - Submit as "COMMENT" type so the review doesn't block the PR.
            - Wrap your PR review in <details> tags.
