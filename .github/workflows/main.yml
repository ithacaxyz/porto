name: Main
on:
  push:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  verify:
    name: Verify
    uses: ./.github/workflows/verify.yml
    secrets: inherit

  extension:
    name: Extension
    uses: ./.github/workflows/extension.yml
    secrets: inherit

  changesets:
    name: Changesets
    needs: [verify, extension]
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Clone repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up pnpm
        uses: wevm/actions/.github/actions/pnpm@main

      - name: PR or publish
        id: changesets
        uses: changesets/action@06245a4e0a36c064a573d4150030f5ec548e4fcc
        with:
          title: 'chore: version packages'
          commit: 'chore: version packages'
          createGithubReleases: ${{ github.ref == 'refs/heads/main' }}
          publish: pnpm changeset:publish
          version: pnpm changeset:version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Update latest release with extension artifacts
        if: steps.changesets.outputs.published == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Get the latest release
            const { data: latestRelease } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            // Get artifact URL from extension job
            const artifactUrl = '${{ needs.extension.outputs.artifact-url }}';
            
            // Create extension section for release notes
            const extensionSection = [
              '\n\n### Extension',
              '\n',
              `[Download](${artifactUrl})`,
              '\n',
              '#### Setup Instructions',
              '\n',
              '1. Download the `extension.zip` asset from the link below',
              '2. Unzip the downloaded file',
              '\n',
              '##### Chrome',
              '\n',
              '3. Unzip the Chrome directory',
              '4. Open Chrome and navigate to `chrome://extensions`',
              '5. Enable `Developer Mode` in the top right corner',
              '6. Click `Load Unpacked` in the top left corner',
              '7. Select the unzipped Chrome directory',
              '8. Done!'
              '\n',
              '##### Firefox',
              '\n',
              '3. Open your browser and navigate to `about:debugging#/runtime/this-firefox`',
              '4. Click `Load Temporary Add-on...` in the top right corner',
              '5. Select the zipped Firefox directory',
              '6. Done!'
            ].join('\n');

            // Update release body (append to existing content)
            const body = (latestRelease.body || '') + extensionSection;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: latestRelease.id,
              body
            });
      
