name: Claude Review

on:
  pull_request:
    types: [opened, ready_for_review, labeled]

jobs:
  claude-review:
    name: Claude Review
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check
        id: check_pr_review
        uses: actions/github-script@v7
        with:
          script: |
            // Check if this is a PR-related event and not authored by Claude
            const isNotClaude = context.payload.pull_request?.user?.login !== 'claude-bot' && 
                                context.payload.issue?.user?.login !== 'claude-bot';
            
            // Check if this is a labeled event with the 'claude-review' label
            const isClaudeReviewLabel = context.eventName === 'pull_request' && 
                                       context.payload.action === 'labeled' && 
                                       context.payload.label?.name === 'claude-review';
            
            // Check if PR is not a draft (for opened/ready_for_review events)
            const isNotDraft = !context.payload.pull_request?.draft;
            
            // Should review if:
            // 1. Claude review label was added, OR
            // 2. PR was opened/ready_for_review and is not a draft
            const shouldReview = isNotClaude && (isClaudeReviewLabel || 
                                (context.payload.action !== 'labeled' && isNotDraft));
            
            console.log(`Event: ${context.eventName}, Action: ${context.payload.action}`);
            console.log(`Label name: "${context.payload.label?.name}"`);
            console.log(`Checking conditions:`);
            console.log(`  eventName === 'pull_request': ${context.eventName === 'pull_request'}`);
            console.log(`  action === 'labeled': ${context.payload.action === 'labeled'}`);
            console.log(`  label name === 'claude-review': ${context.payload.label?.name === 'claude-review'}`);
            console.log(`Is not Claude: ${isNotClaude}, Is claude-review label: ${isClaudeReviewLabel}, Is not draft: ${isNotDraft}`);
            console.log(`Should review: ${shouldReview}`);
            
            core.setOutput('should_review', shouldReview);
            return shouldReview;

      - name: Run Claude PR Review
        if: steps.check_pr_review.outputs.should_review == 'true'
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          timeout_minutes: "60"
          disallowed_tools: "npm,yarn"
          allowed_tools: "mcp__github__create_pull_request,mcp__github__create_pending_pull_request_review,mcp__github__get_pull_request_diff,mcp__github__add_pull_request_review_comment_to_pending_review,mcp__github__submit_pending_pull_request_review,Bash(pnpm check),Bash(pnpm check:*),Bash(pnpm test),Bash(pnpm test:*),Bash(pnpm install),Bash(pnpm build)"
          direct_prompt: |-
            Please review this PR and provide inline feedback using the GitHub review system. Follow these steps:

            1. **Start a review**: Use `mcp__github__create_pending_pull_request_review` to begin a pending review
            2. **Get diff information**: Use `mcp__github__get_pull_request_diff` to understand the code changes and line numbers
            3. **Add inline comments**: Use `mcp__github__add_pull_request_review_comment_to_pending_review` for each specific piece of feedback on particular lines, you MUST favor suggestions (using ```suggestion <code> ```) instead of direct code blocks.
            4. **Submit the review**: Use `mcp__github__submit_pending_pull_request_review` with event type "COMMENT" (not "REQUEST_CHANGES") to publish all comments as a non-blocking review

            Focus your review on:
            - Code quality and best practices
            - Potential bugs or security issues
            - Performance considerations
            - Maintainability and readability
            - Architecture and design decisions

            Provide specific, actionable feedback. Use inline comments for line-specific issues and include an overall summary when submitting the review.
            **Important**:
            - Submit as "COMMENT" type so the review doesn't block the PR.
            - Wrap your PR review in <details> tags.
