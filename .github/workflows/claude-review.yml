name: Claude Review

on:
  pull_request:
    types: [ready_for_review]

jobs:
  claude-review:
    name: Claude Review
    needs: check-permissions
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check
        id: check_pr_review
        uses: actions/github-script@v7
        with:
          script: |
            // Check if this is a PR-related event and not authored by Claude
            const isNotClaude = context.payload.pull_request?.user?.login !== 'claude-bot' && 
                                context.payload.issue?.user?.login !== 'claude-bot';
            core.setOutput('should_review', isNotClaude);
            return isNotClaude;

      - name: Run Claude PR Review
        if: steps.check_pr_review.outputs.should_review == 'true'
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          timeout_minutes: "60"
          disallowed_tools: "npm,yarn"
          allowed_tools: "mcp__github__create_pull_request,mcp__github__create_pending_pull_request_review,mcp__github__get_pull_request_diff,mcp__github__add_pull_request_review_comment_to_pending_review,mcp__github__submit_pending_pull_request_review,Bash(pnpm check),Bash(pnpm check:*),Bash(pnpm test),Bash(pnpm test:*),Bash(pnpm install),Bash(pnpm build)"
          direct_prompt: |-
            Please review this PR and provide inline feedback using the GitHub review system. Follow these steps:

            1. **Start a review**: Use `mcp__github__create_pending_pull_request_review` to begin a pending review
            2. **Get diff information**: Use `mcp__github__get_pull_request_diff` to understand the code changes and line numbers
            3. **Add inline comments**: Use `mcp__github__add_pull_request_review_comment_to_pending_review` for each specific piece of feedback on particular lines
            4. **Submit the review**: Use `mcp__github__submit_pending_pull_request_review` with event type "COMMENT" (not "REQUEST_CHANGES") to publish all comments as a non-blocking review

            Focus your review on:
            - Code quality and best practices
            - Potential bugs or security issues
            - Performance considerations
            - Maintainability and readability
            - Architecture and design decisions

            Provide specific, actionable feedback. Use inline comments for line-specific issues and include an overall summary when submitting the review.
            **Important**:
            - Submit as "COMMENT" type so the review doesn't block the PR.
            - Wrap your PR review in <details> tags.
