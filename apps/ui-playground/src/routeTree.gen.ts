/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ScreenImport } from './routes/Screen'
import { Route as FrameImport } from './routes/Frame'
import { Route as ColorSchemeSwitchImport } from './routes/ColorSchemeSwitch'
import { Route as ButtonImport } from './routes/Button'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const ScreenRoute = ScreenImport.update({
  id: '/Screen',
  path: '/Screen',
  getParentRoute: () => rootRoute,
} as any)

const FrameRoute = FrameImport.update({
  id: '/Frame',
  path: '/Frame',
  getParentRoute: () => rootRoute,
} as any)

const ColorSchemeSwitchRoute = ColorSchemeSwitchImport.update({
  id: '/ColorSchemeSwitch',
  path: '/ColorSchemeSwitch',
  getParentRoute: () => rootRoute,
} as any)

const ButtonRoute = ButtonImport.update({
  id: '/Button',
  path: '/Button',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/Button': {
      id: '/Button'
      path: '/Button'
      fullPath: '/Button'
      preLoaderRoute: typeof ButtonImport
      parentRoute: typeof rootRoute
    }
    '/ColorSchemeSwitch': {
      id: '/ColorSchemeSwitch'
      path: '/ColorSchemeSwitch'
      fullPath: '/ColorSchemeSwitch'
      preLoaderRoute: typeof ColorSchemeSwitchImport
      parentRoute: typeof rootRoute
    }
    '/Frame': {
      id: '/Frame'
      path: '/Frame'
      fullPath: '/Frame'
      preLoaderRoute: typeof FrameImport
      parentRoute: typeof rootRoute
    }
    '/Screen': {
      id: '/Screen'
      path: '/Screen'
      fullPath: '/Screen'
      preLoaderRoute: typeof ScreenImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Button': typeof ButtonRoute
  '/ColorSchemeSwitch': typeof ColorSchemeSwitchRoute
  '/Frame': typeof FrameRoute
  '/Screen': typeof ScreenRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Button': typeof ButtonRoute
  '/ColorSchemeSwitch': typeof ColorSchemeSwitchRoute
  '/Frame': typeof FrameRoute
  '/Screen': typeof ScreenRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/Button': typeof ButtonRoute
  '/ColorSchemeSwitch': typeof ColorSchemeSwitchRoute
  '/Frame': typeof FrameRoute
  '/Screen': typeof ScreenRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/Button' | '/ColorSchemeSwitch' | '/Frame' | '/Screen'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/Button' | '/ColorSchemeSwitch' | '/Frame' | '/Screen'
  id: '__root__' | '/' | '/Button' | '/ColorSchemeSwitch' | '/Frame' | '/Screen'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ButtonRoute: typeof ButtonRoute
  ColorSchemeSwitchRoute: typeof ColorSchemeSwitchRoute
  FrameRoute: typeof FrameRoute
  ScreenRoute: typeof ScreenRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ButtonRoute: ButtonRoute,
  ColorSchemeSwitchRoute: ColorSchemeSwitchRoute,
  FrameRoute: FrameRoute,
  ScreenRoute: ScreenRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Button",
        "/ColorSchemeSwitch",
        "/Frame",
        "/Screen"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Button": {
      "filePath": "Button.tsx"
    },
    "/ColorSchemeSwitch": {
      "filePath": "ColorSchemeSwitch.tsx"
    },
    "/Frame": {
      "filePath": "Frame.tsx"
    },
    "/Screen": {
      "filePath": "Screen.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
