/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TokenIconRouteImport } from './routes/TokenIcon'
import { Route as ThemeSwitchRouteImport } from './routes/ThemeSwitch'
import { Route as SpinnerRouteImport } from './routes/Spinner'
import { Route as SpacerRouteImport } from './routes/Spacer'
import { Route as ShowAfterRouteImport } from './routes/ShowAfter'
import { Route as SeparatorRouteImport } from './routes/Separator'
import { Route as ScreenRouteImport } from './routes/Screen'
import { Route as PresetsInputRouteImport } from './routes/PresetsInput'
import { Route as OtpInputRouteImport } from './routes/OtpInput'
import { Route as InputRouteImport } from './routes/Input'
import { Route as FrameRouteImport } from './routes/Frame'
import { Route as DiscIconRouteImport } from './routes/DiscIcon'
import { Route as DetailsRouteImport } from './routes/Details'
import { Route as DepositRouteImport } from './routes/Deposit'
import { Route as CopyButtonRouteImport } from './routes/CopyButton'
import { Route as ColorsRouteImport } from './routes/Colors'
import { Route as ChainsPathRouteImport } from './routes/ChainsPath'
import { Route as ChainIconRouteImport } from './routes/ChainIcon'
import { Route as ButtonAreaRouteImport } from './routes/ButtonArea'
import { Route as ButtonRouteImport } from './routes/Button'
import { Route as BalanceRouteImport } from './routes/Balance'
import { Route as IndexRouteImport } from './routes/index'

const TokenIconRoute = TokenIconRouteImport.update({
  id: '/TokenIcon',
  path: '/TokenIcon',
  getParentRoute: () => rootRouteImport,
} as any)
const ThemeSwitchRoute = ThemeSwitchRouteImport.update({
  id: '/ThemeSwitch',
  path: '/ThemeSwitch',
  getParentRoute: () => rootRouteImport,
} as any)
const SpinnerRoute = SpinnerRouteImport.update({
  id: '/Spinner',
  path: '/Spinner',
  getParentRoute: () => rootRouteImport,
} as any)
const SpacerRoute = SpacerRouteImport.update({
  id: '/Spacer',
  path: '/Spacer',
  getParentRoute: () => rootRouteImport,
} as any)
const ShowAfterRoute = ShowAfterRouteImport.update({
  id: '/ShowAfter',
  path: '/ShowAfter',
  getParentRoute: () => rootRouteImport,
} as any)
const SeparatorRoute = SeparatorRouteImport.update({
  id: '/Separator',
  path: '/Separator',
  getParentRoute: () => rootRouteImport,
} as any)
const ScreenRoute = ScreenRouteImport.update({
  id: '/Screen',
  path: '/Screen',
  getParentRoute: () => rootRouteImport,
} as any)
const PresetsInputRoute = PresetsInputRouteImport.update({
  id: '/PresetsInput',
  path: '/PresetsInput',
  getParentRoute: () => rootRouteImport,
} as any)
const OtpInputRoute = OtpInputRouteImport.update({
  id: '/OtpInput',
  path: '/OtpInput',
  getParentRoute: () => rootRouteImport,
} as any)
const InputRoute = InputRouteImport.update({
  id: '/Input',
  path: '/Input',
  getParentRoute: () => rootRouteImport,
} as any)
const FrameRoute = FrameRouteImport.update({
  id: '/Frame',
  path: '/Frame',
  getParentRoute: () => rootRouteImport,
} as any)
const DiscIconRoute = DiscIconRouteImport.update({
  id: '/DiscIcon',
  path: '/DiscIcon',
  getParentRoute: () => rootRouteImport,
} as any)
const DetailsRoute = DetailsRouteImport.update({
  id: '/Details',
  path: '/Details',
  getParentRoute: () => rootRouteImport,
} as any)
const DepositRoute = DepositRouteImport.update({
  id: '/Deposit',
  path: '/Deposit',
  getParentRoute: () => rootRouteImport,
} as any)
const CopyButtonRoute = CopyButtonRouteImport.update({
  id: '/CopyButton',
  path: '/CopyButton',
  getParentRoute: () => rootRouteImport,
} as any)
const ColorsRoute = ColorsRouteImport.update({
  id: '/Colors',
  path: '/Colors',
  getParentRoute: () => rootRouteImport,
} as any)
const ChainsPathRoute = ChainsPathRouteImport.update({
  id: '/ChainsPath',
  path: '/ChainsPath',
  getParentRoute: () => rootRouteImport,
} as any)
const ChainIconRoute = ChainIconRouteImport.update({
  id: '/ChainIcon',
  path: '/ChainIcon',
  getParentRoute: () => rootRouteImport,
} as any)
const ButtonAreaRoute = ButtonAreaRouteImport.update({
  id: '/ButtonArea',
  path: '/ButtonArea',
  getParentRoute: () => rootRouteImport,
} as any)
const ButtonRoute = ButtonRouteImport.update({
  id: '/Button',
  path: '/Button',
  getParentRoute: () => rootRouteImport,
} as any)
const BalanceRoute = BalanceRouteImport.update({
  id: '/Balance',
  path: '/Balance',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Balance': typeof BalanceRoute
  '/Button': typeof ButtonRoute
  '/ButtonArea': typeof ButtonAreaRoute
  '/ChainIcon': typeof ChainIconRoute
  '/ChainsPath': typeof ChainsPathRoute
  '/Colors': typeof ColorsRoute
  '/CopyButton': typeof CopyButtonRoute
  '/Deposit': typeof DepositRoute
  '/Details': typeof DetailsRoute
  '/DiscIcon': typeof DiscIconRoute
  '/Frame': typeof FrameRoute
  '/Input': typeof InputRoute
  '/OtpInput': typeof OtpInputRoute
  '/PresetsInput': typeof PresetsInputRoute
  '/Screen': typeof ScreenRoute
  '/Separator': typeof SeparatorRoute
  '/ShowAfter': typeof ShowAfterRoute
  '/Spacer': typeof SpacerRoute
  '/Spinner': typeof SpinnerRoute
  '/ThemeSwitch': typeof ThemeSwitchRoute
  '/TokenIcon': typeof TokenIconRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Balance': typeof BalanceRoute
  '/Button': typeof ButtonRoute
  '/ButtonArea': typeof ButtonAreaRoute
  '/ChainIcon': typeof ChainIconRoute
  '/ChainsPath': typeof ChainsPathRoute
  '/Colors': typeof ColorsRoute
  '/CopyButton': typeof CopyButtonRoute
  '/Deposit': typeof DepositRoute
  '/Details': typeof DetailsRoute
  '/DiscIcon': typeof DiscIconRoute
  '/Frame': typeof FrameRoute
  '/Input': typeof InputRoute
  '/OtpInput': typeof OtpInputRoute
  '/PresetsInput': typeof PresetsInputRoute
  '/Screen': typeof ScreenRoute
  '/Separator': typeof SeparatorRoute
  '/ShowAfter': typeof ShowAfterRoute
  '/Spacer': typeof SpacerRoute
  '/Spinner': typeof SpinnerRoute
  '/ThemeSwitch': typeof ThemeSwitchRoute
  '/TokenIcon': typeof TokenIconRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/Balance': typeof BalanceRoute
  '/Button': typeof ButtonRoute
  '/ButtonArea': typeof ButtonAreaRoute
  '/ChainIcon': typeof ChainIconRoute
  '/ChainsPath': typeof ChainsPathRoute
  '/Colors': typeof ColorsRoute
  '/CopyButton': typeof CopyButtonRoute
  '/Deposit': typeof DepositRoute
  '/Details': typeof DetailsRoute
  '/DiscIcon': typeof DiscIconRoute
  '/Frame': typeof FrameRoute
  '/Input': typeof InputRoute
  '/OtpInput': typeof OtpInputRoute
  '/PresetsInput': typeof PresetsInputRoute
  '/Screen': typeof ScreenRoute
  '/Separator': typeof SeparatorRoute
  '/ShowAfter': typeof ShowAfterRoute
  '/Spacer': typeof SpacerRoute
  '/Spinner': typeof SpinnerRoute
  '/ThemeSwitch': typeof ThemeSwitchRoute
  '/TokenIcon': typeof TokenIconRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Balance'
    | '/Button'
    | '/ButtonArea'
    | '/ChainIcon'
    | '/ChainsPath'
    | '/Colors'
    | '/CopyButton'
    | '/Deposit'
    | '/Details'
    | '/DiscIcon'
    | '/Frame'
    | '/Input'
    | '/OtpInput'
    | '/PresetsInput'
    | '/Screen'
    | '/Separator'
    | '/ShowAfter'
    | '/Spacer'
    | '/Spinner'
    | '/ThemeSwitch'
    | '/TokenIcon'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/Balance'
    | '/Button'
    | '/ButtonArea'
    | '/ChainIcon'
    | '/ChainsPath'
    | '/Colors'
    | '/CopyButton'
    | '/Deposit'
    | '/Details'
    | '/DiscIcon'
    | '/Frame'
    | '/Input'
    | '/OtpInput'
    | '/PresetsInput'
    | '/Screen'
    | '/Separator'
    | '/ShowAfter'
    | '/Spacer'
    | '/Spinner'
    | '/ThemeSwitch'
    | '/TokenIcon'
  id:
    | '__root__'
    | '/'
    | '/Balance'
    | '/Button'
    | '/ButtonArea'
    | '/ChainIcon'
    | '/ChainsPath'
    | '/Colors'
    | '/CopyButton'
    | '/Deposit'
    | '/Details'
    | '/DiscIcon'
    | '/Frame'
    | '/Input'
    | '/OtpInput'
    | '/PresetsInput'
    | '/Screen'
    | '/Separator'
    | '/ShowAfter'
    | '/Spacer'
    | '/Spinner'
    | '/ThemeSwitch'
    | '/TokenIcon'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BalanceRoute: typeof BalanceRoute
  ButtonRoute: typeof ButtonRoute
  ButtonAreaRoute: typeof ButtonAreaRoute
  ChainIconRoute: typeof ChainIconRoute
  ChainsPathRoute: typeof ChainsPathRoute
  ColorsRoute: typeof ColorsRoute
  CopyButtonRoute: typeof CopyButtonRoute
  DepositRoute: typeof DepositRoute
  DetailsRoute: typeof DetailsRoute
  DiscIconRoute: typeof DiscIconRoute
  FrameRoute: typeof FrameRoute
  InputRoute: typeof InputRoute
  OtpInputRoute: typeof OtpInputRoute
  PresetsInputRoute: typeof PresetsInputRoute
  ScreenRoute: typeof ScreenRoute
  SeparatorRoute: typeof SeparatorRoute
  ShowAfterRoute: typeof ShowAfterRoute
  SpacerRoute: typeof SpacerRoute
  SpinnerRoute: typeof SpinnerRoute
  ThemeSwitchRoute: typeof ThemeSwitchRoute
  TokenIconRoute: typeof TokenIconRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/TokenIcon': {
      id: '/TokenIcon'
      path: '/TokenIcon'
      fullPath: '/TokenIcon'
      preLoaderRoute: typeof TokenIconRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ThemeSwitch': {
      id: '/ThemeSwitch'
      path: '/ThemeSwitch'
      fullPath: '/ThemeSwitch'
      preLoaderRoute: typeof ThemeSwitchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Spinner': {
      id: '/Spinner'
      path: '/Spinner'
      fullPath: '/Spinner'
      preLoaderRoute: typeof SpinnerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Spacer': {
      id: '/Spacer'
      path: '/Spacer'
      fullPath: '/Spacer'
      preLoaderRoute: typeof SpacerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ShowAfter': {
      id: '/ShowAfter'
      path: '/ShowAfter'
      fullPath: '/ShowAfter'
      preLoaderRoute: typeof ShowAfterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Separator': {
      id: '/Separator'
      path: '/Separator'
      fullPath: '/Separator'
      preLoaderRoute: typeof SeparatorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Screen': {
      id: '/Screen'
      path: '/Screen'
      fullPath: '/Screen'
      preLoaderRoute: typeof ScreenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/PresetsInput': {
      id: '/PresetsInput'
      path: '/PresetsInput'
      fullPath: '/PresetsInput'
      preLoaderRoute: typeof PresetsInputRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/OtpInput': {
      id: '/OtpInput'
      path: '/OtpInput'
      fullPath: '/OtpInput'
      preLoaderRoute: typeof OtpInputRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Input': {
      id: '/Input'
      path: '/Input'
      fullPath: '/Input'
      preLoaderRoute: typeof InputRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Frame': {
      id: '/Frame'
      path: '/Frame'
      fullPath: '/Frame'
      preLoaderRoute: typeof FrameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/DiscIcon': {
      id: '/DiscIcon'
      path: '/DiscIcon'
      fullPath: '/DiscIcon'
      preLoaderRoute: typeof DiscIconRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Details': {
      id: '/Details'
      path: '/Details'
      fullPath: '/Details'
      preLoaderRoute: typeof DetailsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Deposit': {
      id: '/Deposit'
      path: '/Deposit'
      fullPath: '/Deposit'
      preLoaderRoute: typeof DepositRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/CopyButton': {
      id: '/CopyButton'
      path: '/CopyButton'
      fullPath: '/CopyButton'
      preLoaderRoute: typeof CopyButtonRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Colors': {
      id: '/Colors'
      path: '/Colors'
      fullPath: '/Colors'
      preLoaderRoute: typeof ColorsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ChainsPath': {
      id: '/ChainsPath'
      path: '/ChainsPath'
      fullPath: '/ChainsPath'
      preLoaderRoute: typeof ChainsPathRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ChainIcon': {
      id: '/ChainIcon'
      path: '/ChainIcon'
      fullPath: '/ChainIcon'
      preLoaderRoute: typeof ChainIconRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ButtonArea': {
      id: '/ButtonArea'
      path: '/ButtonArea'
      fullPath: '/ButtonArea'
      preLoaderRoute: typeof ButtonAreaRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Button': {
      id: '/Button'
      path: '/Button'
      fullPath: '/Button'
      preLoaderRoute: typeof ButtonRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Balance': {
      id: '/Balance'
      path: '/Balance'
      fullPath: '/Balance'
      preLoaderRoute: typeof BalanceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BalanceRoute: BalanceRoute,
  ButtonRoute: ButtonRoute,
  ButtonAreaRoute: ButtonAreaRoute,
  ChainIconRoute: ChainIconRoute,
  ChainsPathRoute: ChainsPathRoute,
  ColorsRoute: ColorsRoute,
  CopyButtonRoute: CopyButtonRoute,
  DepositRoute: DepositRoute,
  DetailsRoute: DetailsRoute,
  DiscIconRoute: DiscIconRoute,
  FrameRoute: FrameRoute,
  InputRoute: InputRoute,
  OtpInputRoute: OtpInputRoute,
  PresetsInputRoute: PresetsInputRoute,
  ScreenRoute: ScreenRoute,
  SeparatorRoute: SeparatorRoute,
  ShowAfterRoute: ShowAfterRoute,
  SpacerRoute: SpacerRoute,
  SpinnerRoute: SpinnerRoute,
  ThemeSwitchRoute: ThemeSwitchRoute,
  TokenIconRoute: TokenIconRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
