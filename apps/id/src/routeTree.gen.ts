/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PlaygroundImport } from './routes/playground'
import { Route as AuthImport } from './routes/auth'
import { Route as DashImport } from './routes/_dash'
import { Route as DashIndexImport } from './routes/_dash/index'

// Create/Update Routes

const PlaygroundRoute = PlaygroundImport.update({
  id: '/playground',
  path: '/playground',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const DashRoute = DashImport.update({
  id: '/_dash',
  getParentRoute: () => rootRoute,
} as any)

const DashIndexRoute = DashIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dash': {
      id: '/_dash'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/playground': {
      id: '/playground'
      path: '/playground'
      fullPath: '/playground'
      preLoaderRoute: typeof PlaygroundImport
      parentRoute: typeof rootRoute
    }
    '/_dash/': {
      id: '/_dash/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashIndexImport
      parentRoute: typeof DashImport
    }
  }
}

// Create and export the route tree

interface DashRouteChildren {
  DashIndexRoute: typeof DashIndexRoute
}

const DashRouteChildren: DashRouteChildren = {
  DashIndexRoute: DashIndexRoute,
}

const DashRouteWithChildren = DashRoute._addFileChildren(DashRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof DashRouteWithChildren
  '/auth': typeof AuthRoute
  '/playground': typeof PlaygroundRoute
  '/': typeof DashIndexRoute
}

export interface FileRoutesByTo {
  '/auth': typeof AuthRoute
  '/playground': typeof PlaygroundRoute
  '/': typeof DashIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_dash': typeof DashRouteWithChildren
  '/auth': typeof AuthRoute
  '/playground': typeof PlaygroundRoute
  '/_dash/': typeof DashIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/auth' | '/playground' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/auth' | '/playground' | '/'
  id: '__root__' | '/_dash' | '/auth' | '/playground' | '/_dash/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashRoute: typeof DashRouteWithChildren
  AuthRoute: typeof AuthRoute
  PlaygroundRoute: typeof PlaygroundRoute
}

const rootRouteChildren: RootRouteChildren = {
  DashRoute: DashRouteWithChildren,
  AuthRoute: AuthRoute,
  PlaygroundRoute: PlaygroundRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_dash",
        "/auth",
        "/playground"
      ]
    },
    "/_dash": {
      "filePath": "_dash.tsx",
      "children": [
        "/_dash/"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/playground": {
      "filePath": "playground.tsx"
    },
    "/_dash/": {
      "filePath": "_dash/index.tsx",
      "parent": "/_dash"
    }
  }
}
ROUTE_MANIFEST_END */
