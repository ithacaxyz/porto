#!/usr/bin/env bun

import { parseArgs } from 'util'
import * as v from 'valibot'
import { ThemeSchema } from './schema.js'
import type { Theme } from './Theme.js'

async function readTheme(path: string): Promise<Theme> {
  const fileContent = await Bun.file(path).json()

  const parsedTheme = v.safeParse(ThemeSchema, fileContent)

  if (!parsedTheme.success) {
    console.error('Invalid theme file:', parsedTheme.issues)
    process.exit(1)
  }

  return parsedTheme.output
}

function cssVars(theme: Theme) {
  const vars: Record<`--${string}`, string> = {}
  for (const [key, value] of Object.entries(theme)) {
    if (excludedKeys.includes(key) || value === null) {
      continue
    }
    vars[`--${camelCaseToKebabCase(key)}`] = pxValue(value)
  }
  return vars
}

function stylexVars(theme: Theme) {
  const vars: Record<`--${string}`, string | number> = {}
  for (const [key, value] of Object.entries(theme)) {
    if (excludedKeys.includes(key) || value === null) {
      continue
    }
    vars[`--${camelCaseToKebabCase(key)}`] = pxValue(value)
  }
  return vars
}

function pxValue(value: string | number): string {
  return typeof value === 'number' ? `${value}px` : value
}

function camelCaseToKebabCase(str: string): string {
  return str.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase()
}

const { values, positionals } = parseArgs({
  allowPositionals: true,
  args: Bun.argv,
  options: {
    stylex: {
      type: 'boolean',
    },
  },
  strict: true,
})

const themeFile = positionals[2]
if (!themeFile) {
  console.error('Usage: ./theme-to-css <theme> <output> [--stylex]')
  process.exit(1)
}

const excludedKeys = ['id', 'name', 'parent', 'previewUrl', 'animations']

const theme = await readTheme(themeFile)

if (values.stylex) {
  console.log(`// This file was generated by theme-to-css.ts

import * as stylex from '@stylexjs/stylex'

export const theme = stylex.create(${JSON.stringify({ vars: stylexVars(theme) }, null, 2)});`)
} else {
  console.log(cssVars(theme))
}
